# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Admin {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AdminWhereUniqueInput {
  id: ID
  email: String
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AdminOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AdminUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input AdminUpdateArgs {
  where: AdminWhereUniqueInput!
  data: AdminUpdateInput!
}

input AdminCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Position {
  id: ID!
  name: String
  team(where: Team_MemberWhereInput! = {}, orderBy: [Team_MemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: Team_MemberWhereUniqueInput): [Team_Member!]
  teamCount(where: Team_MemberWhereInput! = {}): Int
}

input PositionWhereUniqueInput {
  id: ID
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
  id: IDFilter
  name: StringFilter
  team: Team_MemberManyRelationFilter
}

input Team_MemberManyRelationFilter {
  every: Team_MemberWhereInput
  some: Team_MemberWhereInput
  none: Team_MemberWhereInput
}

input PositionOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PositionUpdateInput {
  name: String
  team: Team_MemberRelateToManyForUpdateInput
}

input Team_MemberRelateToManyForUpdateInput {
  disconnect: [Team_MemberWhereUniqueInput!]
  set: [Team_MemberWhereUniqueInput!]
  create: [Team_MemberCreateInput!]
  connect: [Team_MemberWhereUniqueInput!]
}

input PositionUpdateArgs {
  where: PositionWhereUniqueInput!
  data: PositionUpdateInput!
}

input PositionCreateInput {
  name: String
  team: Team_MemberRelateToManyForCreateInput
}

input Team_MemberRelateToManyForCreateInput {
  create: [Team_MemberCreateInput!]
  connect: [Team_MemberWhereUniqueInput!]
}

type Team_Member {
  id: ID!
  fullname: String
  nickname: String
  email: String
  position: Position
  profile: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input Team_MemberWhereUniqueInput {
  id: ID
}

input Team_MemberWhereInput {
  AND: [Team_MemberWhereInput!]
  OR: [Team_MemberWhereInput!]
  NOT: [Team_MemberWhereInput!]
  id: IDFilter
  fullname: StringFilter
  nickname: StringFilter
  email: StringFilter
  position: PositionWhereInput
}

input Team_MemberOrderByInput {
  id: OrderDirection
  fullname: OrderDirection
  nickname: OrderDirection
  email: OrderDirection
}

input Team_MemberUpdateInput {
  fullname: String
  nickname: String
  email: String
  position: PositionRelateToOneForUpdateInput
  profile: ImageFieldInput
}

input PositionRelateToOneForUpdateInput {
  create: PositionCreateInput
  connect: PositionWhereUniqueInput
  disconnect: Boolean
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input Team_MemberUpdateArgs {
  where: Team_MemberWhereUniqueInput!
  data: Team_MemberUpdateInput!
}

input Team_MemberCreateInput {
  fullname: String
  nickname: String
  email: String
  position: PositionRelateToOneForCreateInput
  profile: ImageFieldInput
}

input PositionRelateToOneForCreateInput {
  create: PositionCreateInput
  connect: PositionWhereUniqueInput
}

type Company_Information {
  id: ID!
  name: String
  address: String
  createdAt: DateTime
  updatedAt: DateTime
}

input Company_InformationWhereUniqueInput {
  id: ID
}

input Company_InformationWhereInput {
  AND: [Company_InformationWhereInput!]
  OR: [Company_InformationWhereInput!]
  NOT: [Company_InformationWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input Company_InformationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input Company_InformationUpdateInput {
  name: String
  address: String
  createdAt: DateTime
  updatedAt: DateTime
}

input Company_InformationUpdateArgs {
  where: Company_InformationWhereUniqueInput!
  data: Company_InformationUpdateInput!
}

input Company_InformationCreateInput {
  name: String
  address: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin
  createAdmins(data: [AdminCreateInput!]!): [Admin]
  updateAdmin(where: AdminWhereUniqueInput!, data: AdminUpdateInput!): Admin
  updateAdmins(data: [AdminUpdateArgs!]!): [Admin]
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteAdmins(where: [AdminWhereUniqueInput!]!): [Admin]
  createPosition(data: PositionCreateInput!): Position
  createPositions(data: [PositionCreateInput!]!): [Position]
  updatePosition(where: PositionWhereUniqueInput!, data: PositionUpdateInput!): Position
  updatePositions(data: [PositionUpdateArgs!]!): [Position]
  deletePosition(where: PositionWhereUniqueInput!): Position
  deletePositions(where: [PositionWhereUniqueInput!]!): [Position]
  createTeam_Member(data: Team_MemberCreateInput!): Team_Member
  createTeamMembers(data: [Team_MemberCreateInput!]!): [Team_Member]
  updateTeam_Member(where: Team_MemberWhereUniqueInput!, data: Team_MemberUpdateInput!): Team_Member
  updateTeamMembers(data: [Team_MemberUpdateArgs!]!): [Team_Member]
  deleteTeam_Member(where: Team_MemberWhereUniqueInput!): Team_Member
  deleteTeamMembers(where: [Team_MemberWhereUniqueInput!]!): [Team_Member]
  createCompany_Information(data: Company_InformationCreateInput!): Company_Information
  createCompanyInformations(data: [Company_InformationCreateInput!]!): [Company_Information]
  updateCompany_Information(where: Company_InformationWhereUniqueInput!, data: Company_InformationUpdateInput!): Company_Information
  updateCompanyInformations(data: [Company_InformationUpdateArgs!]!): [Company_Information]
  deleteCompany_Information(where: Company_InformationWhereUniqueInput!): Company_Information
  deleteCompanyInformations(where: [Company_InformationWhereUniqueInput!]!): [Company_Information]
  endSession: Boolean!
  authenticateAdminWithPassword(email: String!, password: String!): AdminAuthenticationWithPasswordResult
  createInitialAdmin(data: CreateInitialAdminInput!): AdminAuthenticationWithPasswordSuccess!
}

union AdminAuthenticationWithPasswordResult = AdminAuthenticationWithPasswordSuccess | AdminAuthenticationWithPasswordFailure

type AdminAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Admin!
}

type AdminAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialAdminInput {
  name: String
  email: String
  password: String
}

type Query {
  admins(where: AdminWhereInput! = {}, orderBy: [AdminOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdminWhereUniqueInput): [Admin!]
  admin(where: AdminWhereUniqueInput!): Admin
  adminsCount(where: AdminWhereInput! = {}): Int
  positions(where: PositionWhereInput! = {}, orderBy: [PositionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PositionWhereUniqueInput): [Position!]
  position(where: PositionWhereUniqueInput!): Position
  positionsCount(where: PositionWhereInput! = {}): Int
  teamMembers(where: Team_MemberWhereInput! = {}, orderBy: [Team_MemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: Team_MemberWhereUniqueInput): [Team_Member!]
  team_Member(where: Team_MemberWhereUniqueInput!): Team_Member
  teamMembersCount(where: Team_MemberWhereInput! = {}): Int
  companyInformations(where: Company_InformationWhereInput! = {}, orderBy: [Company_InformationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: Company_InformationWhereUniqueInput): [Company_Information!]
  company_Information(where: Company_InformationWhereUniqueInput!): Company_Information
  companyInformationsCount(where: Company_InformationWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Admin

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
